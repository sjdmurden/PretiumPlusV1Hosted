@using Microsoft.AspNetCore.Http
@model CSV_reader.ViewModels.ClaimsViewModel
@{
    var jsonFileUrl = Url.Content("AdditionalMaterial/clientDetails.json");
}

<!DOCTYPE html>
<html>
<head>
    <title>PDF Preview</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@latest/dist/tailwind.min.css" rel="stylesheet">
</head>
<body>
    <div class="pdf-preview">
        <h2 class="display-6" style="margin-bottom: 2rem; margin-top: 2rem;">Quote Preview</h2>
        <iframe class="w-full" src="data:application/pdf;base64,@ViewBag.PdfBase64" width="100%" height="600px"></iframe>

        <button id="downloadPdfButton" onclick="downloadPDF()" class="btn btn-primary" style="margin-top: 2rem;">Download PDF</button>
    </div>

    <script>
        function downloadPDF() {
            const iframe = document.querySelector('iframe');

            const pdfBase64 = iframe.src.split(',')[1]  // Extract base64 part of iframe:src attribute

            // the Base64 string must be decoded back into raw bytes for the Blob constructor to interpret it correctly. This requires two steps:
            // 1. atob converts base64 string into binary string (byteCharacters)
            // 2. now convert this binary string into numeric binary data using charCodeAt() to create a Uint8Array (this is byteNumbers), so the Blob constructor can use it to create a proper PDF file

            const byteCharacters = atob(pdfBase64)   

            const byteNumbers = new Array(byteCharacters.length)  // this array's length is equal to the length of the byteCharacters string
            for (let i = 0; i < byteCharacters.length; i++) 
            {
                byteNumbers[i] = byteCharacters.charCodeAt(i)  // this converts each character to its numeric byte value (UTF-16 code unit) and puts them into the byteNumbers array
            }

            // now need to convert byteNumbers array into a usable array that represents binary data for the Blob onstructor
            // byteArray now represents the PDF's raw binary data
            const byteArray = new Uint8Array(byteNumbers)
            const blob = new Blob([byteArray], { type: 'application/pdf' }) 
            // the Blob constructor creates a Blob object representing the PDF file. The "application/pdf" specifies the type of data


            const link = document.createElement('a')  // creates temp anchor tag
            link.href = URL.createObjectURL(blob)  // creates a temp url that points to the blob object in browser's memory and assigns it to the href attribute of the link anchor tag
            link.download = 'FleetInsuranceQuote.pdf';  // names the downloaded file
            document.body.appendChild(link);  // this adds the anchor tag to the body

            link.click();  // simulates a click on the anchor tag
            document.body.removeChild(link);  // removes anchor tag from document
            URL.revokeObjectURL(url);  // cleans up space by removing url from memory so the same pdf isn't downloaded again
        }

        document.addEventListener("DOMContentLoaded", function () {
            fetch("@jsonFileUrl")
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok ' + response.statusText);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log("JSON Data:", data);
                })
                .catch(error => {
                    console.error('There was a problem with the fetch operation:', error);
                });
        });
    </script>
</body>
</html>
